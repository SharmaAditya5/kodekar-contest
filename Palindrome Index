#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'palindromeIndex' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts STRING s as parameter.
 */


int palindromeIndex(string a) {
    int n=a.length();
    int j=0;
    for(int i=n-1;i>=n/2;i--)
    {
        if(a[i]!=a[j])
        {
            if(a[j]==a[i-1])
            {
                cout<<"A["<<j<<"]==a["<<i-1<<"]"<<endl;
                int x=j;
                x++;
                if(a[x]==a[i-2])
                {
                    cout<<"A["<<j+1<<"]==a["<<i-2<<"]"<<endl;
                    return i;
                }
                else
                    return j;
            }
            else
            {
                cout<<"i:j"<<i<<","<<j<<endl;
                return j;
            }
        }
        j++;
    }
    return -1;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = palindromeIndex(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
