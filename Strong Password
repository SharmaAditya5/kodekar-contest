#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'minimumNumber' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. STRING password
 */


int minimumNumber(int n, string password) {
    int c=0,f=0;
    for(int i=0;i<n;i++)
    {
        if(isupper(password[i]))
        {
            f=1;
            break;
        }
    }
    
    if(f==0)
        c++;
    f=0;
    for(int i=0;i<n;i++)
    {
        if(islower(password[i]))
        {
            f=1;
            break;
        }
    }
    if(f==0)
        c++;
    f=0;
    for(int i=0;i<n;i++)
    {
        if((password[i]=='!')||(password[i]=='@')||(password[i]=='#')||(password[i]=='$')||(password[i]=='%')||(password[i]=='+')||(password[i]=='-')||(password[i]=='^')||(password[i]=='(')||(password[i]=='*')||(password[i]=='&')||(password[i]==')')||(password[i]=='"'))
        {
            f=1;
            break;
        }
    }
    
    if(f==0)
        c++;
    f=0;
     for(int i=0;i<n;i++)
    {
        if(isdigit(password[i]))
        {
            f=1;
            break;
        }
    }
    if(f==0)
        c++;
    f=0;
    int l=password.length();
    cout<<c;
    if((c+l)<6)
        return c+(6-l-c);
    return c;
    
    // Return the minimum number of characters to make the password strong

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string password;
    getline(cin, password);

    int answer = minimumNumber(n, password);

    fout << answer << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
